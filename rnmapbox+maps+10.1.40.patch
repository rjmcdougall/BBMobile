diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXMarkerViewManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXMarkerViewManager.kt
index 186ed0e..c379023 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXMarkerViewManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXMarkerViewManager.kt
@@ -39,12 +39,15 @@ class RNMBXMarkerViewManager(reactApplicationContext: ReactApplicationContext) :
     @ReactProp(name = "coordinate")
     override fun setCoordinate(markerView: RNMBXMarkerView, value: Dynamic) {
         val array = value.asArray()
-        markerView.setCoordinate(toGNPointGeometry(LatLng(array.getDouble(1), array.getDouble(0))))
+        if (array != null) {
+            markerView.setCoordinate(toGNPointGeometry(LatLng(array.getDouble(1), array.getDouble(0))))
+        }
     }
 
     @ReactProp(name = "anchor")
     override fun setAnchor(markerView: RNMBXMarkerView, map: Dynamic) {
-        markerView.setAnchor(map.asMap().getDouble("x").toFloat(), map.asMap().getDouble("y").toFloat())
+        map.asMap()?.getDouble("y")
+            ?.let { markerView.setAnchor(map.asMap()!!.getDouble("x").toFloat(), it.toFloat()) }
     }
 
     @ReactProp(name = "allowOverlap")
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXPointAnnotationManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXPointAnnotationManager.kt
index 4920db6..da70124 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXPointAnnotationManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXPointAnnotationManager.kt
@@ -69,7 +69,7 @@ class RNMBXPointAnnotationManager(reactApplicationContext: ReactApplicationConte
 
     @ReactProp(name = "anchor")
     override fun setAnchor(annotation: RNMBXPointAnnotation, map: Dynamic) {
-        annotation.setAnchor(map.asMap().getDouble("x").toFloat(), map.asMap().getDouble("y").toFloat())
+        annotation.setAnchor(map.asMap()!!.getDouble("x").toFloat(), map.asMap()!!.getDouble("y").toFloat())
     }
 
     @ReactProp(name = "draggable")
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXCameraManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXCameraManager.kt
index 106c020..45e4014 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXCameraManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXCameraManager.kt
@@ -34,15 +34,17 @@ class RNMBXCameraManager(private val mContext: ReactApplicationContext, val view
     @ReactProp(name = "stop")
     override fun setStop(camera: RNMBXCamera, map: Dynamic) {
         if (!map.isNull) {
-            val stop = fromReadableMap(mContext, map.asMap(), null)
-            camera.setStop(stop)
+            val stop = map.asMap()?.let { fromReadableMap(mContext, it, null) }
+            if (stop != null) {
+                camera.setStop(stop)
+            }
         }
     }
 
     @ReactProp(name = "defaultStop")
     override fun setDefaultStop(camera: RNMBXCamera, map: Dynamic) {
         if (!map.isNull) {
-            val stop = fromReadableMap(mContext, map.asMap(), null)
+            val stop = map.asMap()?.let { fromReadableMap(mContext, it, null) }
             camera.setDefaultStop(stop)
         }
     }
@@ -95,14 +97,14 @@ class RNMBXCameraManager(private val mContext: ReactApplicationContext, val view
 
     @ReactProp(name = "followPadding")
     override fun setFollowPadding(camera: RNMBXCamera, value: Dynamic) {
-        camera.setFollowPadding(value.asMap())
+        value.asMap()?.let { camera.setFollowPadding(it) }
     }
 
     @ReactProp(name = "maxBounds")
     override fun setMaxBounds(camera: RNMBXCamera, value: Dynamic) {
         if (!value.isNull) {
-            val collection = FeatureCollection.fromJson(value.asString())
-            camera.setMaxBounds(toLatLngBounds(collection))
+            val collection = value.asString()?.let { FeatureCollection.fromJson(it) }
+            camera.setMaxBounds(collection?.let { toLatLngBounds(it) })
         } else {
             camera.setMaxBounds(null)
         }
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXViewport.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXViewport.kt
index fa058a8..97cb6a9 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXViewport.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXViewport.kt
@@ -40,18 +40,20 @@ import com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions
 import com.rnmapbox.rnmbx.events.constants.EventKeys
 
 class BaseEvent(
-    private val surfaceId: Int,
-    private val viewTag: Int,
-    private val eventName: String,
+    surfaceId: Int,
+    viewTag: Int,
+    eventName: String,
     private val eventData: WritableMap,
-    private val canCoalesce: Boolean = false
+    private val canCoalesceFlag: Boolean = false
 ): Event<BaseEvent>(surfaceId, viewTag) {
+    private val _eventName = eventName
+
     override fun getEventName(): String {
-        return eventName
+        return _eventName
     }
 
     override fun canCoalesce(): Boolean {
-        return canCoalesce
+        return canCoalesceFlag
     }
 
     override fun getEventData(): WritableMap? {
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/images/RNMBXImagesManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/images/RNMBXImagesManager.kt
index 4c5a3a8..de10fb7 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/images/RNMBXImagesManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/images/RNMBXImagesManager.kt
@@ -73,7 +73,7 @@ class RNMBXImagesManager(private val mContext: ReactApplicationContext) :
     @ReactProp(name = "images")
     override fun setImages(images: RNMBXImages, map: Dynamic) {
         val imagesList = mutableListOf<Map.Entry<String, ImageEntry>>()
-        map.asMap().forEach { imageName, imageInfo ->
+        map.asMap()?.forEach { imageName, imageInfo ->
             when (imageInfo) {
                 is ReadableMap -> {
                     val uri = imageInfo.getString("uri")
@@ -119,10 +119,12 @@ class RNMBXImagesManager(private val mContext: ReactApplicationContext) :
                         }
                     }
                 }
+
                 is String -> {
                     val name = imageInfo
                     imagesList.add(AbstractMap.SimpleEntry(imageName, ImageEntry(name, ImageInfo(name=imageName))))
                 }
+
                 else -> {
                     Logger.e("RNMBXImagesManager", "Unexpected value for key: $imageName in images property, only string/object is supported")
                 }
@@ -164,7 +166,8 @@ class RNMBXImagesManager(private val mContext: ReactApplicationContext) :
                 val drawable =
                     convertDrawableToBitmap(ResourceUtils.getDrawableByName(mContext, resourceName))
                 if (drawable != null) {
-                    return NativeImage(ImageInfo(name=resourceName), drawable)
+                    return resourceName?.let { ImageInfo(name= it) }
+                        ?.let { NativeImage(it, drawable) }
                 } else {
                     Logger.e("RNMBXImages", "cound not get native drawable with name: $resourceName")
                     return null
@@ -172,7 +175,7 @@ class RNMBXImagesManager(private val mContext: ReactApplicationContext) :
             }
             ReadableType.Map -> {
                 val map = dynamic.asMap()
-                val resourceName = map.getString("name")
+                val resourceName = map?.getString("name")
                 val drawable =
                     convertDrawableToBitmap(ResourceUtils.getDrawableByName(mContext, resourceName))
                 if (drawable != null && resourceName != null) {
@@ -192,8 +195,8 @@ class RNMBXImagesManager(private val mContext: ReactApplicationContext) :
     @ReactProp(name = "nativeImages")
     override fun setNativeImages(images: RNMBXImages, arr: Dynamic) {
         val nativeImages = mutableListOf<NativeImage>();
-        for (i in 0 until arr.asArray().size()) {
-            val nativeImage = toNativeImage(arr.asArray().getDynamic(i))
+        for (i in 0 until arr.asArray()!!.size()) {
+            val nativeImage = toNativeImage(arr.asArray()!!.getDynamic(i))
             if (nativeImage != null) {
                 nativeImages.add(nativeImage)
             }
@@ -242,18 +245,20 @@ class RNMBXImagesManager(private val mContext: ReactApplicationContext) :
             }
             val array = stretch.asArray()
             var result = mutableListOf<ImageStretches>();
-            for (i in 0 until array.size()) {
-                if (array.getType(i) != ReadableType.Array) {
-                    Logger.e("RNMBXImages", "each element of strech should be an array but was: ${array.getDynamic(i)}")
-                } else {
-                    val pair = array.getArray(i)
-                    if (pair != null) {
-                        if (pair.size() != 2 || pair.getType(0) != ReadableType.Number || pair.getType(1) != ReadableType.Number) {
-                            Logger.e("RNMBXImages", "each element of stretch should be pair of 2 integers but was ${pair}")
-                        } 
-                        result.add(ImageStretches(pair.getDouble(0).toFloat(), pair.getDouble(1).toFloat()))
+            if (array != null) {
+                for (i in 0 until array.size()) {
+                    if (array.getType(i) != ReadableType.Array) {
+                        Logger.e("RNMBXImages", "each element of strech should be an array but was: ${array.getDynamic(i)}")
                     } else {
-                        Logger.e("RNMBXImages", "each element of stretch should be an array but was null")
+                        val pair = array.getArray(i)
+                        if (pair != null) {
+                            if (pair.size() != 2 || pair.getType(0) != ReadableType.Number || pair.getType(1) != ReadableType.Number) {
+                                Logger.e("RNMBXImages", "each element of stretch should be pair of 2 integers but was ${pair}")
+                            }
+                            result.add(ImageStretches(pair.getDouble(0).toFloat(), pair.getDouble(1).toFloat()))
+                        } else {
+                            Logger.e("RNMBXImages", "each element of stretch should be an array but was null")
+                        }
                     }
                 }
             }
@@ -266,17 +271,21 @@ class RNMBXImagesManager(private val mContext: ReactApplicationContext) :
                 return null
             }
             val array = content.asArray()
-            if (array.size() != 4) {
-                Logger.e("RNMBXImages", "content should be an array of 4 numbers, got $content")
-                return null
+            if (array != null) {
+                if (array.size() != 4) {
+                    Logger.e("RNMBXImages", "content should be an array of 4 numbers, got $content")
+                    return null
+                }
             }
             val result = arrayOf(0.0, 0.0, 0.0, 0.0, 0.0)
-            for (i in 0 until array.size()) {
-                if (array.getType(i) != ReadableType.Number) {
-                    Logger.e("RNMBXImages", "each element of content should be an number but was : ${array}")
-                    return null
-                } else {
-                    result[i] = array.getDouble(i)
+            if (array != null) {
+                for (i in 0 until array.size()) {
+                    if (array.getType(i) != ReadableType.Number) {
+                        Logger.e("RNMBXImages", "each element of content should be an number but was : ${array}")
+                        return null
+                    } else {
+                        result[i] = array.getDouble(i)
+                    }
                 }
             }
             return ImageContent(result[0].toFloat(), result[1].toFloat() ,result[2].toFloat(), result[3].toFloat())
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXCustomLocationProviderManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXCustomLocationProviderManager.kt
index 67145d1..b81e5ad 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXCustomLocationProviderManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXCustomLocationProviderManager.kt
@@ -24,10 +24,12 @@ class RNMBXCustomLocationProviderManager : ViewGroupManager<RNMBXCustomLocationP
     override fun setCoordinate(view: RNMBXCustomLocationProvider, value: Dynamic?) {
         if (value?.type == ReadableType.Array) {
             val array = value.asArray()
-            if (array.size() == 2 && array.getType(0) == ReadableType.Number && array.getType(1) == ReadableType.Number) {
-                view.coordinate = Pair(array.getDouble(0), array.getDouble(1))
-            } else {
-                Logger.e(LOG_TAG, "coordinate is expected to be an array of numbers with 2 elements")
+            if (array != null) {
+                if (array.size() == 2 && array.getType(0) == ReadableType.Number && array.getType(1) == ReadableType.Number) {
+                    view.coordinate = Pair(array.getDouble(0), array.getDouble(1))
+                } else {
+                    Logger.e(LOG_TAG, "coordinate is expected to be an array of numbers with 2 elements")
+                }
             }
         } else {
             Logger.e(LOG_TAG, "coordinate is expected to be an array of numbers with 2 elements")
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocation.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocation.kt
index 4c1ffd0..aa1c0f9 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocation.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocation.kt
@@ -163,7 +163,8 @@ class RNMBXNativeUserLocation(context: Context) : AbstractMapFeature(context), O
             if (pulsing.hasKey("color")) {
                 when (pulsing.getType("color")) {
                     ReadableType.Map ->
-                        location2.pulsingColor = ColorPropConverter.getColor(pulsing.getMap("color"), mContext)
+                        location2.pulsingColor =
+                            ColorPropConverter.getColor(pulsing.getMap("color"), mContext)!!
                     ReadableType.Number ->
                         location2.pulsingColor = pulsing.getInt("color")
                     else ->
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocationManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocationManager.kt
index 2869ce6..979fbf6 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocationManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocationManager.kt
@@ -109,7 +109,7 @@ fun _convertToDoubleValueOrExpression(value: Dynamic?, name: String): Value? {
     }
     return when (value.type) {
         ReadableType.Array ->
-            Expression.fromRaw(Gson().toJson(value.asArray().toJsonArray()))
+            Expression.fromRaw(Gson().toJson(value.asArray()!!.toJsonArray()))
         ReadableType.Number ->
             Value.valueOf(value.asDouble())
         else -> {
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/mapview/RNMBXMapViewManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/mapview/RNMBXMapViewManager.kt
index 15f4917..5a6b578 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/mapview/RNMBXMapViewManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/mapview/RNMBXMapViewManager.kt
@@ -139,8 +139,8 @@ open class RNMBXMapViewManager(context: ReactApplicationContext, val viewTagReso
 
     @ReactProp(name = "localizeLabels")
     override fun setLocalizeLabels(mapView: RNMBXMapView, localeMap: Dynamic) {
-        val locale = localeMap.asMap().getString("locale")
-        val layerIds = localeMap.asMap().getArray("layerIds")?.toArrayList()?.mapNotNull {it.toString()}
+        val locale = localeMap.asMap()?.getString("locale")
+        val layerIds = localeMap.asMap()?.getArray("layerIds")?.toArrayList()?.mapNotNull {it.toString()}
         mapView.setReactLocalizeLabels(locale, layerIds)
     }
 
@@ -161,43 +161,43 @@ open class RNMBXMapViewManager(context: ReactApplicationContext, val viewTagReso
            it.gesturesPlugin {
                val map = settings.asMap()
                this.updateSettings {
-                   map.getAndLogIfNotBoolean("doubleTapToZoomInEnabled", LOG_TAG)?.let {
+                   map?.getAndLogIfNotBoolean("doubleTapToZoomInEnabled", LOG_TAG)?.let {
                        this.doubleTapToZoomInEnabled = it
                    }
-                   map.getAndLogIfNotBoolean("doubleTouchToZoomOutEnabled", LOG_TAG)?.let {
+                   map?.getAndLogIfNotBoolean("doubleTouchToZoomOutEnabled", LOG_TAG)?.let {
                        this.doubleTouchToZoomOutEnabled = it
                    }
-                   map.getAndLogIfNotBoolean("pinchPanEnabled", LOG_TAG)?.let {
+                   map?.getAndLogIfNotBoolean("pinchPanEnabled", LOG_TAG)?.let {
                        this.pinchScrollEnabled = it
                    }
-                   map.getAndLogIfNotBoolean("pinchZoomEnabled", LOG_TAG)?.let {
+                   map?.getAndLogIfNotBoolean("pinchZoomEnabled", LOG_TAG)?.let {
                        this.pinchToZoomEnabled = it
                    }
-                   map.getAndLogIfNotBoolean("pinchZoomDecelerationEnabled", LOG_TAG)?.let {
+                   map?.getAndLogIfNotBoolean("pinchZoomDecelerationEnabled", LOG_TAG)?.let {
                        this.pinchToZoomDecelerationEnabled = it
                    }
-                   map.getAndLogIfNotBoolean("pitchEnabled", LOG_TAG)?.let {
+                   map?.getAndLogIfNotBoolean("pitchEnabled", LOG_TAG)?.let {
                        this.pitchEnabled = it
                    }
-                   map.getAndLogIfNotBoolean("quickZoomEnabled", LOG_TAG)?.let {
+                   map?.getAndLogIfNotBoolean("quickZoomEnabled", LOG_TAG)?.let {
                        this.quickZoomEnabled = it
                    }
-                   map.getAndLogIfNotBoolean("rotateEnabled", LOG_TAG)?.let {
+                   map?.getAndLogIfNotBoolean("rotateEnabled", LOG_TAG)?.let {
                        this.rotateEnabled = it
                    }
-                   map.getAndLogIfNotBoolean("rotateDecelerationEnabled", LOG_TAG)?.let {
+                   map?.getAndLogIfNotBoolean("rotateDecelerationEnabled", LOG_TAG)?.let {
                        this.rotateDecelerationEnabled = it
                    }
-                   map.getAndLogIfNotBoolean("panEnabled", LOG_TAG)?.let {
+                   map?.getAndLogIfNotBoolean("panEnabled", LOG_TAG)?.let {
                        this.scrollEnabled = it
                    }
-                   map.getAndLogIfNotDouble("panDecelerationFactor", LOG_TAG)?.let {
+                   map?.getAndLogIfNotDouble("panDecelerationFactor", LOG_TAG)?.let {
                        this.scrollDecelerationEnabled = it > 0.0
                    }
-                   map.getAndLogIfNotBoolean("simultaneousRotateAndPinchToZoomEnabled", LOG_TAG)?.let {
+                   map?.getAndLogIfNotBoolean("simultaneousRotateAndPinchToZoomEnabled", LOG_TAG)?.let {
                        this.simultaneousRotateAndPinchToZoomEnabled = it
                    }
-                   map.getAndLogIfNotDouble("zoomAnimationAmount", LOG_TAG)?.let {
+                   map?.getAndLogIfNotDouble("zoomAnimationAmount", LOG_TAG)?.let {
                        this.zoomAnimationAmount = it.toFloat()
                    }
                }
@@ -207,7 +207,7 @@ open class RNMBXMapViewManager(context: ReactApplicationContext, val viewTagReso
 
     @ReactProp(name = "styleURL")
     override fun setStyleURL(mapView: RNMBXMapView, styleURL:Dynamic) {
-        mapView.setReactStyleURL(styleURL.asString())
+        styleURL.asString()?.let { mapView.setReactStyleURL(it) }
     }
 
     @ReactProp(name = "preferredFramesPerSecond")
@@ -257,7 +257,7 @@ open class RNMBXMapViewManager(context: ReactApplicationContext, val viewTagReso
 
     @ReactProp(name = "attributionViewMargins")
     override fun setAttributionViewMargins(mapView: RNMBXMapView, scaleBarMargins: Dynamic) {
-        mapView.setReactAttributionViewMargins(scaleBarMargins.asMap())
+        scaleBarMargins.asMap()?.let { mapView.setReactAttributionViewMargins(it) }
     }
 
     @ReactProp(name = "attributionViewPosition")
@@ -282,12 +282,12 @@ open class RNMBXMapViewManager(context: ReactApplicationContext, val viewTagReso
 
     @ReactProp(name = "scaleBarViewMargins")
     override fun setScaleBarViewMargins(mapView: RNMBXMapView, scaleBarMargins: Dynamic) {
-        mapView.setReactScaleBarViewMargins(scaleBarMargins.asMap())
+        scaleBarMargins.asMap()?.let { mapView.setReactScaleBarViewMargins(it) }
     }
 
     @ReactProp(name = "scaleBarPosition")
     override fun setScaleBarPosition(mapView: RNMBXMapView, scaleBarPosition: Dynamic) {
-        mapView.setReactScaleBarPosition(scaleBarPosition.asMap())
+        scaleBarPosition.asMap()?.let { mapView.setReactScaleBarPosition(it) }
     }
 
     @ReactProp(name = "compassEnabled")
@@ -302,7 +302,7 @@ open class RNMBXMapViewManager(context: ReactApplicationContext, val viewTagReso
 
     @ReactProp(name = "compassViewMargins")
     override fun setCompassViewMargins(mapView: RNMBXMapView, compassViewMargins: Dynamic) {
-        mapView.setReactCompassViewMargins(compassViewMargins.asMap())
+        compassViewMargins.asMap()?.let { mapView.setReactCompassViewMargins(it) }
     }
 
     @ReactProp(name = "compassViewPosition")
@@ -312,7 +312,7 @@ open class RNMBXMapViewManager(context: ReactApplicationContext, val viewTagReso
 
     @ReactProp(name = "compassPosition")
     override fun setCompassPosition(mapView: RNMBXMapView, compassMargins: Dynamic) {
-        mapView.setReactCompassPosition(compassMargins.asMap())
+        compassMargins.asMap()?.let { mapView.setReactCompassPosition(it) }
     }
 
     @ReactProp(name = "contentInset") @Suppress("UNUSED_PARAMETER")
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleImportManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleImportManager.kt
index fafc00b..a95469a 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleImportManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleImportManager.kt
@@ -52,7 +52,7 @@ class RNMBXStyleImportManager(context: ReactApplicationContext) :
         if (value.type != ReadableType.Map) {
             Logger.e(REACT_CLASS, "config expected Map but received: ${value.type}")
         } else {
-            view.config = value.asMap().toValueHashMap()
+            view.config = value.asMap()!!.toValueHashMap()
         }
     }
 }
\ No newline at end of file
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleValue.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleValue.kt
index 8710d28..f9ac4a0 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleValue.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleValue.kt
@@ -223,11 +223,13 @@ class RNMBXStyleValue(config: ReadableMap) {
             val dynamic = mPayload!!.getDynamic("value")
             if (dynamic.type == ReadableType.Array) {
                 val array = dynamic.asArray()
-                if (array.size() > 0 && mPayload.getString("type") == "array") {
-                    val map = array.getMap(0)
-                    if (map != null && map.getString("type") == "string") {
-                        isExpression = true
-                        mExpression = ExpressionParser.fromTyped(mPayload)
+                if (array != null) {
+                    if (array.size() > 0 && mPayload.getString("type") == "array") {
+                        val map = array.getMap(0)
+                        if (map != null && map.getString("type") == "string") {
+                            isExpression = true
+                            mExpression = ExpressionParser.fromTyped(mPayload)
+                        }
                     }
                 }
             }
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/layers/RNMBXModelLayerManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/layers/RNMBXModelLayerManager.kt
index 572fd41..c800357 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/layers/RNMBXModelLayerManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/layers/RNMBXModelLayerManager.kt
@@ -65,7 +65,7 @@ class RNMBXModelLayerManager : ViewGroupManager<RNMBXModelLayer>(),
 
     @ReactProp(name = "sourceLayerID")
     override fun setSourceLayerID(layer: RNMBXModelLayer, sourceLayerID: Dynamic) {
-        layer.setSourceLayerID(sourceLayerID.asString())
+        sourceLayerID.asString()?.let { layer.setSourceLayerID(it) }
     }
 
     @ReactProp(name = "filter")
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXRasterSourceManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXRasterSourceManager.kt
index 17807bf..d7997a4 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXRasterSourceManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXRasterSourceManager.kt
@@ -47,11 +47,11 @@ class RNMBXRasterSourceManager(reactApplicationContext: ReactApplicationContext)
 
     @ReactProp(name = "sourceBounds")
     override fun setSourceBounds(source: RNMBXRasterSource, value: Dynamic) {
-        if (value.type != ReadableType.Array || value.asArray().size() != 4) {
+        if (value.type != ReadableType.Array || value.asArray()!!.size() != 4) {
            Logger.e(REACT_CLASS, "source bounds must be an array with left, bottom, top, and right values")
            return
         }
-        val bboxArray = Array(4) { i -> value.asArray().getDouble(i) }
+        val bboxArray = Array(4) { i -> value.asArray()!!.getDouble(i) }
 
         if(!this.validateBbox(bboxArray)){
             Logger.e(REACT_CLASS, "source bounds contain invalid bbox")
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXShapeSourceManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXShapeSourceManager.kt
index 3332858..7ac445c 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXShapeSourceManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXShapeSourceManager.kt
@@ -82,7 +82,7 @@ class RNMBXShapeSourceManager(private val mContext: ReactApplicationContext, val
 
     @ReactProp(name = "shape")
     override fun setShape(source: RNMBXShapeSource, geoJSONStr: Dynamic) {
-        source.setShape(geoJSONStr.asString())
+        geoJSONStr.asString()?.let { source.setShape(it) }
     }
 
     @ReactProp(name = "cluster")
@@ -103,30 +103,32 @@ class RNMBXShapeSourceManager(private val mContext: ReactApplicationContext, val
     @ReactProp(name = "clusterProperties")
     override fun setClusterProperties(source: RNMBXShapeSource, map: Dynamic) {
         val properties = HashMap<String, Any>()
-        val iterator = map.asMap().keySetIterator()
-        while (iterator.hasNextKey()) {
-            val name = iterator.nextKey()
-            val expressions = map.asMap().getArray(name)
-            val builder: MutableList<Value> = ArrayList()
-            for (iExp in 0 until expressions!!.size()) {
-                var argument: Expression
-                argument = when (expressions.getType(iExp)) {
-                    ReadableType.Array -> ExpressionParser.from(
-                        expressions.getArray(iExp)
-                    )!!
-                    ReadableType.Map -> ExpressionParser.from(
-                        expressions.getMap(iExp)
-                    )
-                    ReadableType.Boolean -> Expression.literal(expressions.getBoolean(iExp))
-                    ReadableType.Number -> Expression.literal(expressions.getDouble(iExp))
-                    else -> {
-                        Logger.d("setClusterProperties", "Unknown type for $iExp")
-                        return 
+        val iterator = map.asMap()?.keySetIterator()
+        if (iterator != null) {
+            while (iterator.hasNextKey()) {
+                val name = iterator.nextKey()
+                val expressions = map.asMap()!!.getArray(name)
+                val builder: MutableList<Value> = ArrayList()
+                for (iExp in 0 until expressions!!.size()) {
+                    var argument: Expression
+                    argument = when (expressions.getType(iExp)) {
+                        ReadableType.Array -> ExpressionParser.from(
+                            expressions.getArray(iExp)
+                        )!!
+                        ReadableType.Map -> ExpressionParser.from(
+                            expressions.getMap(iExp)
+                        )
+                        ReadableType.Boolean -> Expression.literal(expressions.getBoolean(iExp))
+                        ReadableType.Number -> Expression.literal(expressions.getDouble(iExp))
+                        else -> {
+                            Logger.d("setClusterProperties", "Unknown type for $iExp")
+                            return
+                        }
                     }
+                    builder.add(argument)
                 }
-                builder.add(argument)
+                properties[name] = Value(builder)
             }
-            properties[name] = Value(builder)
         }
         source.setClusterProperties(properties)
     }
@@ -158,7 +160,7 @@ class RNMBXShapeSourceManager(private val mContext: ReactApplicationContext, val
 
     @ReactProp(name = "hitbox")
     override fun setHitbox(source: RNMBXShapeSource, map: Dynamic) {
-        source.setHitbox(map.asMap())
+        map.asMap()?.let { source.setHitbox(it) }
     }
 
     override fun customEvents(): Map<String, String>? {
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXTileSourceManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXTileSourceManager.kt
index 96e0688..00d630d 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXTileSourceManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXTileSourceManager.kt
@@ -40,9 +40,9 @@ abstract class RNMBXTileSourceManager<T : RNMBXTileSource<*>> internal construct
     @ReactProp(name = "tileUrlTemplates")
     fun setTileUrlTemplates(source: T, tileUrlTemplates: Dynamic) {
         val urls: MutableList<String> = ArrayList()
-        for (i in 0 until tileUrlTemplates.asArray().size()) {
-            if (tileUrlTemplates.asArray().getType(0) == ReadableType.String) {
-                tileUrlTemplates.asArray().getString(i)?.let { urls.add(it) } ?: Logger.d("RNMBXTileSource", "Skipping null URL template at index $i")
+        for (i in 0 until tileUrlTemplates.asArray()!!.size()) {
+            if (tileUrlTemplates.asArray()!!.getType(0) == ReadableType.String) {
+                tileUrlTemplates.asArray()!!.getString(i)?.let { urls.add(it) } ?: Logger.d("RNMBXTileSource", "Skipping null URL template at index $i")
             }
         }
         source!!.tileUrlTemplates = urls
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXVectorSourceManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXVectorSourceManager.kt
index b0d3e88..f3e5b85 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXVectorSourceManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXVectorSourceManager.kt
@@ -30,7 +30,7 @@ class RNMBXVectorSourceManager(reactApplicationContext: ReactApplicationContext)
 
     @ReactProp(name = "hitbox")
     override fun setHitbox(source: RNMBXVectorSource, map: Dynamic) {
-        source.setHitbox(map.asMap())
+        map.asMap()?.let { source.setHitbox(it) }
     }
 
     @ReactProp(name = "existing")
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/modules/RNMBXTileStoreModule.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/modules/RNMBXTileStoreModule.kt
index 29fbaa5..554a98a 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/modules/RNMBXTileStoreModule.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/modules/RNMBXTileStoreModule.kt
@@ -50,7 +50,8 @@ class RNMBXTileStoreModule(private val mReactContext: ReactApplicationContext) :
       return
     }
 
-    tileStore.setOption(key, TileDataDomain.valueOf(domain.uppercase()), value.getDynamic("value").toValue());
+    value.getDynamic("value").toValue()
+      ?.let { tileStore.setOption(key, TileDataDomain.valueOf(domain.uppercase()), it) };
     promise.resolve(null)
   }
 
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/utils/extensions/Dynamic.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/utils/extensions/Dynamic.kt
index 36a4a0b..3b1ea96 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/utils/extensions/Dynamic.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/utils/extensions/Dynamic.kt
@@ -50,14 +50,14 @@ fun ReadableArray.toValue(): Value {
     return Value.valueOf(result)
 }
 
-fun Dynamic.toValue(): Value {
+fun Dynamic.toValue(): Value? {
     return when (type) {
         ReadableType.Null -> Value.nullValue()
         ReadableType.Boolean -> Value.valueOf(asBoolean())
         ReadableType.Number -> Value.valueOf(asDouble())
-        ReadableType.String -> Value.valueOf(asString())
-        ReadableType.Array -> asArray().toValue()
-        ReadableType.Map -> asMap().toValue()
+        ReadableType.String -> Value.valueOf(asString().toString())
+        ReadableType.Array -> asArray()!!.toValue()
+        ReadableType.Map -> asMap()?.toValue()
     }
 }
 
diff --git a/node_modules/@rnmapbox/maps/src/modules/location/locationManager.ts b/node_modules/@rnmapbox/maps/src/modules/location/locationManager.ts
index 8bbbffd..f078c4a 100644
--- a/node_modules/@rnmapbox/maps/src/modules/location/locationManager.ts
+++ b/node_modules/@rnmapbox/maps/src/modules/location/locationManager.ts
@@ -15,10 +15,12 @@ const MapboxGL = NativeModules.RNMBXModule
 const MapboxGLLocationManager: typeof NativeRNMBXLocationModule = Platform.select({ios: NativeModules.RNMBXLocationModule, android:  NativeRNMBXLocationModule})
 
 export const LocationModuleEventEmitter = new NativeEventEmitter(
-  // eslint-disable-next-line @typescript-eslint/no-explicit-any
-  MapboxGLLocationManager as any,
+  Platform.OS === 'ios' ? NativeModules.RNMBXLocationModule : undefined
 );
 
+
+
+
 /**
  * Location sent by locationManager
  */
